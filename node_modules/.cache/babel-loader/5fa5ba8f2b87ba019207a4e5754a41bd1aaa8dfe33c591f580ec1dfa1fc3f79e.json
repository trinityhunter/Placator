{"ast":null,"code":"/*!\n * headroom.js v0.12.0 - Give your page some headroom. Hide your header until you need it\n * Copyright (c) 2020 Nick Williams - http://wicky.nillia.ms/headroom.js\n * License: MIT\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Headroom = factory());\n})(this, function () {\n  'use strict';\n\n  function isBrowser() {\n    return typeof window !== \"undefined\";\n  }\n\n  /**\n   * Used to detect browser support for adding an event listener with options\n   * Credit: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n   */\n  function passiveEventsSupported() {\n    var supported = false;\n    try {\n      var options = {\n        // eslint-disable-next-line getter-return\n        get passive() {\n          supported = true;\n        }\n      };\n      window.addEventListener(\"test\", options, options);\n      window.removeEventListener(\"test\", options, options);\n    } catch (err) {\n      supported = false;\n    }\n    return supported;\n  }\n  function isSupported() {\n    return !!(isBrowser() && function () {}.bind && \"classList\" in document.documentElement && Object.assign && Object.keys && requestAnimationFrame);\n  }\n  function isDocument(obj) {\n    return obj.nodeType === 9; // Node.DOCUMENT_NODE === 9\n  }\n\n  function isWindow(obj) {\n    // `obj === window` or `obj instanceof Window` is not sufficient,\n    // as the obj may be the window of an iframe.\n    return obj && obj.document && isDocument(obj.document);\n  }\n  function windowScroller(win) {\n    var doc = win.document;\n    var body = doc.body;\n    var html = doc.documentElement;\n    return {\n      /**\n       * @see http://james.padolsey.com/javascript/get-document-height-cross-browser/\n       * @return {Number} the scroll height of the document in pixels\n       */\n      scrollHeight: function scrollHeight() {\n        return Math.max(body.scrollHeight, html.scrollHeight, body.offsetHeight, html.offsetHeight, body.clientHeight, html.clientHeight);\n      },\n      /**\n       * @see http://andylangton.co.uk/blog/development/get-viewport-size-width-and-height-javascript\n       * @return {Number} the height of the viewport in pixels\n       */\n      height: function height() {\n        return win.innerHeight || html.clientHeight || body.clientHeight;\n      },\n      /**\n       * Gets the Y scroll position\n       * @return {Number} pixels the page has scrolled along the Y-axis\n       */\n      scrollY: function scrollY() {\n        if (win.pageYOffset !== undefined) {\n          return win.pageYOffset;\n        }\n        return (html || body.parentNode || body).scrollTop;\n      }\n    };\n  }\n  function elementScroller(element) {\n    return {\n      /**\n       * @return {Number} the scroll height of the element in pixels\n       */\n      scrollHeight: function scrollHeight() {\n        return Math.max(element.scrollHeight, element.offsetHeight, element.clientHeight);\n      },\n      /**\n       * @return {Number} the height of the element in pixels\n       */\n      height: function height() {\n        return Math.max(element.offsetHeight, element.clientHeight);\n      },\n      /**\n       * Gets the Y scroll position\n       * @return {Number} pixels the element has scrolled along the Y-axis\n       */\n      scrollY: function scrollY() {\n        return element.scrollTop;\n      }\n    };\n  }\n  function createScroller(element) {\n    return isWindow(element) ? windowScroller(element) : elementScroller(element);\n  }\n\n  /**\n   * @param element EventTarget\n   */\n  function trackScroll(element, options, callback) {\n    var isPassiveSupported = passiveEventsSupported();\n    var rafId;\n    var scrolled = false;\n    var scroller = createScroller(element);\n    var lastScrollY = scroller.scrollY();\n    var details = {};\n    function update() {\n      var scrollY = Math.round(scroller.scrollY());\n      var height = scroller.height();\n      var scrollHeight = scroller.scrollHeight();\n\n      // reuse object for less memory churn\n      details.scrollY = scrollY;\n      details.lastScrollY = lastScrollY;\n      details.direction = scrollY > lastScrollY ? \"down\" : \"up\";\n      details.distance = Math.abs(scrollY - lastScrollY);\n      details.isOutOfBounds = scrollY < 0 || scrollY + height > scrollHeight;\n      details.top = scrollY <= options.offset[details.direction];\n      details.bottom = scrollY + height >= scrollHeight;\n      details.toleranceExceeded = details.distance > options.tolerance[details.direction];\n      callback(details);\n      lastScrollY = scrollY;\n      scrolled = false;\n    }\n    function handleScroll() {\n      if (!scrolled) {\n        scrolled = true;\n        rafId = requestAnimationFrame(update);\n      }\n    }\n    var eventOptions = isPassiveSupported ? {\n      passive: true,\n      capture: false\n    } : false;\n    element.addEventListener(\"scroll\", handleScroll, eventOptions);\n    update();\n    return {\n      destroy: function destroy() {\n        cancelAnimationFrame(rafId);\n        element.removeEventListener(\"scroll\", handleScroll, eventOptions);\n      }\n    };\n  }\n  function normalizeUpDown(t) {\n    return t === Object(t) ? t : {\n      down: t,\n      up: t\n    };\n  }\n\n  /**\n   * UI enhancement for fixed headers.\n   * Hides header when scrolling down\n   * Shows header when scrolling up\n   * @constructor\n   * @param {DOMElement} elem the header element\n   * @param {Object} options options for the widget\n   */\n  function Headroom(elem, options) {\n    options = options || {};\n    Object.assign(this, Headroom.options, options);\n    this.classes = Object.assign({}, Headroom.options.classes, options.classes);\n    this.elem = elem;\n    this.tolerance = normalizeUpDown(this.tolerance);\n    this.offset = normalizeUpDown(this.offset);\n    this.initialised = false;\n    this.frozen = false;\n  }\n  Headroom.prototype = {\n    constructor: Headroom,\n    /**\n     * Start listening to scrolling\n     * @public\n     */\n    init: function init() {\n      if (Headroom.cutsTheMustard && !this.initialised) {\n        this.addClass(\"initial\");\n        this.initialised = true;\n\n        // defer event registration to handle browser\n        // potentially restoring previous scroll position\n        setTimeout(function (self) {\n          self.scrollTracker = trackScroll(self.scroller, {\n            offset: self.offset,\n            tolerance: self.tolerance\n          }, self.update.bind(self));\n        }, 100, this);\n      }\n      return this;\n    },\n    /**\n     * Destroy the widget, clearing up after itself\n     * @public\n     */\n    destroy: function destroy() {\n      this.initialised = false;\n      Object.keys(this.classes).forEach(this.removeClass, this);\n      this.scrollTracker.destroy();\n    },\n    /**\n     * Unpin the element\n     * @public\n     */\n    unpin: function unpin() {\n      if (this.hasClass(\"pinned\") || !this.hasClass(\"unpinned\")) {\n        this.addClass(\"unpinned\");\n        this.removeClass(\"pinned\");\n        if (this.onUnpin) {\n          this.onUnpin.call(this);\n        }\n      }\n    },\n    /**\n     * Pin the element\n     * @public\n     */\n    pin: function pin() {\n      if (this.hasClass(\"unpinned\")) {\n        this.addClass(\"pinned\");\n        this.removeClass(\"unpinned\");\n        if (this.onPin) {\n          this.onPin.call(this);\n        }\n      }\n    },\n    /**\n     * Freezes the current state of the widget\n     * @public\n     */\n    freeze: function freeze() {\n      this.frozen = true;\n      this.addClass(\"frozen\");\n    },\n    /**\n     * Re-enables the default behaviour of the widget\n     * @public\n     */\n    unfreeze: function unfreeze() {\n      this.frozen = false;\n      this.removeClass(\"frozen\");\n    },\n    top: function top() {\n      if (!this.hasClass(\"top\")) {\n        this.addClass(\"top\");\n        this.removeClass(\"notTop\");\n        if (this.onTop) {\n          this.onTop.call(this);\n        }\n      }\n    },\n    notTop: function notTop() {\n      if (!this.hasClass(\"notTop\")) {\n        this.addClass(\"notTop\");\n        this.removeClass(\"top\");\n        if (this.onNotTop) {\n          this.onNotTop.call(this);\n        }\n      }\n    },\n    bottom: function bottom() {\n      if (!this.hasClass(\"bottom\")) {\n        this.addClass(\"bottom\");\n        this.removeClass(\"notBottom\");\n        if (this.onBottom) {\n          this.onBottom.call(this);\n        }\n      }\n    },\n    notBottom: function notBottom() {\n      if (!this.hasClass(\"notBottom\")) {\n        this.addClass(\"notBottom\");\n        this.removeClass(\"bottom\");\n        if (this.onNotBottom) {\n          this.onNotBottom.call(this);\n        }\n      }\n    },\n    shouldUnpin: function shouldUnpin(details) {\n      var scrollingDown = details.direction === \"down\";\n      return scrollingDown && !details.top && details.toleranceExceeded;\n    },\n    shouldPin: function shouldPin(details) {\n      var scrollingUp = details.direction === \"up\";\n      return scrollingUp && details.toleranceExceeded || details.top;\n    },\n    addClass: function addClass(className) {\n      this.elem.classList.add.apply(this.elem.classList, this.classes[className].split(\" \"));\n    },\n    removeClass: function removeClass(className) {\n      this.elem.classList.remove.apply(this.elem.classList, this.classes[className].split(\" \"));\n    },\n    hasClass: function hasClass(className) {\n      return this.classes[className].split(\" \").every(function (cls) {\n        return this.classList.contains(cls);\n      }, this.elem);\n    },\n    update: function update(details) {\n      if (details.isOutOfBounds) {\n        // Ignore bouncy scrolling in OSX\n        return;\n      }\n      if (this.frozen === true) {\n        return;\n      }\n      if (details.top) {\n        this.top();\n      } else {\n        this.notTop();\n      }\n      if (details.bottom) {\n        this.bottom();\n      } else {\n        this.notBottom();\n      }\n      if (this.shouldUnpin(details)) {\n        this.unpin();\n      } else if (this.shouldPin(details)) {\n        this.pin();\n      }\n    }\n  };\n\n  /**\n   * Default options\n   * @type {Object}\n   */\n  Headroom.options = {\n    tolerance: {\n      up: 0,\n      down: 0\n    },\n    offset: 0,\n    scroller: isBrowser() ? window : null,\n    classes: {\n      frozen: \"headroom--frozen\",\n      pinned: \"headroom--pinned\",\n      unpinned: \"headroom--unpinned\",\n      top: \"headroom--top\",\n      notTop: \"headroom--not-top\",\n      bottom: \"headroom--bottom\",\n      notBottom: \"headroom--not-bottom\",\n      initial: \"headroom\"\n    }\n  };\n  Headroom.cutsTheMustard = isSupported();\n  return Headroom;\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}